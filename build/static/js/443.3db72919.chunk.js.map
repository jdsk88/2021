{"version":3,"file":"static/js/443.3db72919.chunk.js","mappings":"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","sources":["components/atoms/Dashboard/ApexChart.js","components/atoms/Table/Basic.js","components/atoms/Dashboard/index.js","views/pages/Dashboard.js"],"sourcesContent":["import Chart from \"react-apexcharts\";\nimport PropTypes from \"prop-types\";\n\nimport { Card } from \"@mui/material\";\n\nconst ApexChart = ({ data }) => {\n  return (\n    <Card>\n      <Chart {...data} />\n    </Card>\n  );\n};\nApexChart.propTypes = {\n  data: PropTypes.object,\n};\nexport default ApexChart;\n","import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { useSelector } from \"react-redux\";\nimport { Typography } from \"@mui/material\";\n\nexport default function BasicTable({ data, name }) {\n  const cryptocurrencies = useSelector((state) => state.crypto.data);\n  let rows = [];\n  if (cryptocurrencies[0].length > 1) {\n    cryptocurrencies[0].forEach((element, i) => {\n      rows.push({\n        name: element.name.name,\n        image: element.name.image.small,\n        LastPrice: element.marketData.current_price.usd,\n        prc: element.marketData.price_change_percentage_24h,\n        Symbol: element.name.symbol,\n        dayHigh: element.marketData.high_24h.usd,\n        dayLow: element.marketData.low_24h.usd,\n        dayPriceChart: element.marketData.market_cap_change_24h_in_currency.usd,\n        Coins: element.marketData.total_supply,\n        MarketCup: element.marketData.total_volume.usd,\n      });\n    });\n  }\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell sx={{ display: \"flex\" }}>\n              <Typography>{name}</Typography>\n            </TableCell>\n            <TableCell>Last Price</TableCell>\n            <TableCell>%</TableCell>\n            <TableCell>Symbol</TableCell>\n            <TableCell>24 High</TableCell>\n            <TableCell>24 Low</TableCell>\n            <TableCell>Coins</TableCell>\n            <TableCell>Market Cup</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.name}\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell\n                component=\"th\"\n                scope=\"row\"\n                sx={{ display: \"flex\", justifyContent: \"space-evenly\" }}\n              >\n                <img\n                  src={row.image}\n                  style={{\n                    width: \"30%\",\n                    height: \"25px\",\n                    objectFit: \"scale-down\",\n                  }}\n                />\n                <Typography sx={{ width: \"70%\" }}>{row.name}</Typography>\n              </TableCell>\n              <TableCell>{row.LastPrice}</TableCell>\n              <TableCell>{row.prc}</TableCell>\n              <TableCell>{row.Symbol}</TableCell>\n              <TableCell>{row.dayHigh}</TableCell>\n              <TableCell>{row.dayLow}</TableCell>\n              <TableCell>{row.Coins}</TableCell>\n              <TableCell>{row.MarketCup}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import * as React from \"react\";\nimport { createTheme } from \"@mui/material/styles\";\n\nimport Grid from \"@mui/material/Grid\";\n\nimport { Card, FormControl, NativeSelect, Typography } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EventInfo from \"./Click\";\nimport HLLineChart from \"./LineHLC.js\";\nimport ApexChart from \"./ApexChart\";\nimport {\n  CRYPTO_ALL,\n  CRYPTO_CODES,\n  CRYPTO_CODES_GET,\n  CRYPTO_WIDGETDATA,\n  GLOBAL_CLICKER_STATE,\n} from \"store/actions\";\nimport CryptoServices from \"services/api/crypto\";\nimport BasicTable from \"../Table/Basic\";\nfunction DashboardContent() {\n  const dispatch = useDispatch();\n\n  const cryptocharts = useSelector((state) => state.crypto.widgets);\n  const cryptocurrencies = useSelector((state) => state.crypto.data);\n  const crypto_symbols = useSelector((state) => state.crypto.symbols);\n  const line_chart = useSelector((state) => state.crypto.lineChart);\n  console.log(line_chart[0]);\n  const clicks = useSelector((state) => state.global.clicks);\n  let clxarr = [];\n  clicks.forEach((click, i) => {\n    clxarr.push(i);\n  });\n  let xarr = [];\n  clicks.forEach((click, i) => {\n    xarr.push(click.clientX);\n  });\n  let yarr = [];\n  clicks.forEach((click, i) => {\n    yarr.push(click.clientY);\n  });\n\n  const data = [\n    {\n      type: \"bar\",\n      height: 260,\n      options: {\n        chart: {\n          id: \"new-stack-chart\",\n          sparkline: {\n            enabled: true,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: \"80%\",\n          },\n        },\n        xaxis: {\n          crosshairs: {\n            width: 1,\n          },\n        },\n        tooltip: {\n          fixed: {\n            enabled: true,\n          },\n          x: {\n            show: false,\n          },\n          y: {\n            title: \"Stock - \",\n          },\n          marker: {\n            show: false,\n          },\n        },\n      },\n      series: [\n        { name: \"1\", data: clxarr },\n        { name: \"2\", data: clxarr },\n      ],\n    },\n    {\n      type: \"bar\",\n      height: 260,\n      options: {\n        chart: {\n          id: \"new-stack-chart\",\n          sparkline: {\n            enabled: true,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: \"80%\",\n          },\n        },\n        xaxis: {\n          crosshairs: {\n            width: 1,\n          },\n        },\n        tooltip: {\n          fixed: {\n            enabled: false,\n          },\n          x: {\n            show: false,\n          },\n          y: {\n            title: \"Stock - \",\n          },\n          marker: {\n            show: false,\n          },\n        },\n      },\n      series: [\n        {\n          data: [66, 41, 89, 63, 25, 44, 12, 36, 9, 54],\n        },\n      ],\n    },\n    {\n      height: 600,\n      type: \"area\",\n      options: {\n        chart: {\n          id: \"market-sale-chart\",\n          toolbar: {\n            show: true,\n          },\n          zoom: {\n            enabled: true,\n          },\n          sparkline: {\n            enabled: true,\n          },\n        },\n        dataLabels: {\n          enabled: true,\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 2,\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            shadeIntensity: 1,\n            opacityFrom: 0.5,\n            opacityTo: 0,\n            stops: [0, 80, 100],\n          },\n        },\n        legend: {\n          show: true,\n        },\n        yaxis: {\n          min: 1,\n          max: 1000000,\n          labels: {\n            show: false,\n          },\n        },\n      },\n      series: [\n        {\n          name: \"clientX\",\n          data: xarr,\n        },\n        {\n          name: \"clientY\",\n          data: yarr,\n        },\n      ],\n    },\n  ];\n  const crypto = {\n    height: 400,\n    type: \"bar\",\n    options: {\n      chart: {\n        id: \"crypto-chart\",\n        // stacked: true,\n        zoom: {\n          enabled: true,\n        },\n      },\n      plotOptions: {\n        bar: {\n          distributed: true,\n          horizontal: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n\n      stroke: {\n        width: 2,\n      },\n      xaxis: {\n        categories: cryptocharts.length > 0 ? cryptocharts[0].exchange : null,\n      },\n    },\n    series: [\n      {\n        // name: cryptocharts.length > 0 ? cryptocharts[0].symbol : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n  const timeline = {\n    type: \"bar\",\n    height: 600,\n    options: {\n      plotOptions: {\n        bar: {\n          borderRadius: 4,\n          horizontal: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      xaxis: {\n        categories: cryptocharts.length > 0 ? cryptocharts[0].exchange : null,\n      },\n    },\n    series: [\n      {\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  var options = {\n    height: 400,\n    type: \"area\",\n    options: {\n      chart: {\n        id: \"market-sale-chart\",\n        toolbar: {\n          show: true,\n        },\n        zoom: {\n          enabled: true,\n        },\n        sparkline: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 2,\n      },\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shadeIntensity: 1,\n          opacityFrom: 0.5,\n          opacityTo: 0,\n          stops: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n        },\n      },\n      legend: {\n        show: false,\n      },\n      yaxis: {\n        min: 1,\n        max: 100,\n        labels: {\n          show: false,\n        },\n      },\n    },\n    series: [\n      {\n        name: cryptocharts[0] ? cryptocharts[0].name : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  var optionsbig = {\n    height: window.innerHeight - 165,\n    type: \"area\",\n    options: {\n      chart: {\n        id: \"market-sale-chart\",\n        toolbar: {\n          show: true,\n        },\n        zoom: {\n          enabled: true,\n        },\n        sparkline: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 2,\n      },\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shadeIntensity: 1,\n          opacityFrom: 0.5,\n          opacityTo: 0,\n          stops: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n        },\n      },\n      legend: {\n        show: false,\n      },\n      yaxis: {\n        min: 1,\n        max: 100,\n        labels: {\n          show: false,\n        },\n      },\n    },\n    series: [\n      {\n        name: cryptocharts[0] ? cryptocharts[0].name : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  var options2 = {\n    type: \"line\",\n    series: [\n      {\n        name: \"Desktops\",\n        data: [10, 41, 35, 51, 49, 62, 69, 91, 148],\n      },\n    ],\n    chart: {\n      height: 350,\n      type: \"line\",\n      zoom: {\n        enabled: true,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      curve: \"straight\",\n    },\n    title: {\n      text: \"Product Trends by Month\",\n      align: \"left\",\n    },\n    grid: {\n      row: {\n        colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n        opacity: 0.5,\n      },\n    },\n    xaxis: {\n      categories: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n      ],\n    },\n  };\n  const handleNativeSelect = (value) => {\n    CryptoServices.getWidgetData(dispatch, value);\n  };\n  React.useEffect(() => {\n    CryptoServices.getAllData(dispatch);\n    CryptoServices.getSymbols(dispatch);\n    CryptoServices.getLineChartData(dispatch);\n    dispatch({ type: CRYPTO_CODES });\n    dispatch({ type: CRYPTO_CODES_GET });\n    dispatch({ type: GLOBAL_CLICKER_STATE });\n    dispatch({ type: CRYPTO_WIDGETDATA });\n    dispatch({ type: CRYPTO_ALL });\n  }, [dispatch]);\n  return (\n    <>\n     <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Card>\n          <Typography textAlign=\"center\" variant=\"h6\">\n            \n          </Typography>\n        </Card>\n      </Grid>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        {cryptocurrencies.length < 1 ? (\n          <></>\n        ) : (\n          <Card>\n            <BasicTable name={\"Currency\"} />\n          </Card>\n        )}\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Card>\n          <Typography textAlign=\"center\" variant=\"h6\">\n            Choose cryptocurrency\n          </Typography>\n        </Card>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        xl={12}\n        sx={{\n          mt: 1,\n          position: \"sticky\",\n          top: 30,\n          zIndex: 1030,\n          background: \"white\",\n        }}\n      >\n        <FormControl fullWidth>\n          <NativeSelect\n            variant=\"filled\"\n            fullWidth\n            onChange={(e) => handleNativeSelect(e.currentTarget.value)}\n          >\n            <option disabled value={\"btc\"}>\n              Choose cryptocurrency (default: btc)\n            </option>\n            {crypto_symbols[0] &&\n              crypto_symbols[0].map((symbol) => (\n                <option value={symbol}>{symbol}</option>\n              ))}\n          </NativeSelect>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={2} xl={2}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={options} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={10} xl={10}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={crypto} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={optionsbig} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default function Dashboard() {\n  return <DashboardContent />;\n}\n","import Dashboard from \"components/atoms/Dashboard\";\n\nconst DashboardPageView = () => {\n  return <Dashboard />;\n};\nexport default DashboardPageView;\n"],"names":["data","BasicTable","name","cryptocurrencies","useSelector","state","crypto","rows","length","forEach","element","i","push","image","small","LastPrice","marketData","current_price","usd","prc","price_change_percentage_24h","Symbol","symbol","dayHigh","high_24h","dayLow","low_24h","dayPriceChart","market_cap_change_24h_in_currency","Coins","total_supply","MarketCup","total_volume","component","Paper","sx","minWidth","display","map","row","border","scope","justifyContent","src","style","width","height","objectFit","DashboardContent","dispatch","useDispatch","cryptocharts","widgets","crypto_symbols","symbols","line_chart","lineChart","console","log","clicks","global","clxarr","click","xarr","clientX","yarr","clientY","type","options","chart","id","zoom","enabled","plotOptions","bar","distributed","horizontal","dataLabels","stroke","xaxis","categories","exchange","series","current","toolbar","show","sparkline","curve","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","legend","yaxis","min","max","labels","optionsbig","window","innerHeight","React","CryptoServices","CRYPTO_CODES","CRYPTO_CODES_GET","GLOBAL_CLICKER_STATE","CRYPTO_WIDGETDATA","CRYPTO_ALL","item","xs","sm","md","xl","Typography","textAlign","variant","Basic","mt","position","top","zIndex","background","FormControl","fullWidth","NativeSelect","onChange","e","value","currentTarget","disabled","ApexChart","Dashboard"],"sourceRoot":""}