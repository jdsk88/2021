{"version":3,"file":"static/js/454.047ee1d2.chunk.js","mappings":"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","sources":["components/atoms/Dashboard/ApexChart.js","views/crypto/coin.js"],"sourcesContent":["import Chart from \"react-apexcharts\";\nimport PropTypes from \"prop-types\";\n\nimport { Card } from \"@mui/material\";\n\nconst ApexChart = ({ data }) => {\n  return (\n    <Card>\n      <Chart {...data} />\n    </Card>\n  );\n};\nApexChart.propTypes = {\n  data: PropTypes.object,\n};\nexport default ApexChart;\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Card, FormControl, NativeSelect, Typography } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApexChart from \"components/atoms/Dashboard/ApexChart\";\nimport {\n  CRYPTO_CODES,\n  CRYPTO_CODES_GET,\n  CRYPTO_WIDGETDATA,\n  GLOBAL_CLICKER_STATE,\n} from \"store/actions\";\nimport CryptoServices from \"services/api/crypto\";\nfunction CoinContent() {\n  const dispatch = useDispatch();\n\n  const cryptocharts = useSelector((state) => state.crypto.widgets);\n  const crypto_symbols = useSelector((state) => state.crypto.symbols);\n  const clicks = useSelector((state) => state.global.clicks);\n  let clxarr = [];\n  clicks.forEach((click, i) => {\n    clxarr.push(i);\n  });\n  let xarr = [];\n  clicks.forEach((click, i) => {\n    xarr.push(click.clientX);\n  });\n  let yarr = [];\n  clicks.forEach((click, i) => {\n    yarr.push(click.clientY);\n  });\n\n  const crypto = {\n    height: 400,\n    type: \"bar\",\n    options: {\n      chart: {\n        id: \"crypto-chart\",\n        // stacked: true,\n        zoom: {\n          enabled: true,\n        },\n      },\n      plotOptions: {\n        bar: {\n          distributed: true,\n          horizontal: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n\n      stroke: {\n        width: 2,\n      },\n      xaxis: {\n        categories: cryptocharts.length > 0 ? cryptocharts[0].exchange : null,\n      },\n    },\n    series: [\n      {\n        // name: cryptocharts.length > 0 ? cryptocharts[0].symbol : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  var options = {\n    height: 400,\n    type: \"area\",\n    options: {\n      chart: {\n        id: \"market-sale-chart\",\n        toolbar: {\n          show: true,\n        },\n        zoom: {\n          enabled: true,\n        },\n        sparkline: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 2,\n      },\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shadeIntensity: 1,\n          opacityFrom: 0.5,\n          opacityTo: 0,\n          stops: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n        },\n      },\n      legend: {\n        show: false,\n      },\n      yaxis: {\n        min: 1,\n        max: 100,\n        labels: {\n          show: false,\n        },\n      },\n    },\n    series: [\n      {\n        name: cryptocharts[0] ? cryptocharts[0].name : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  var optionsbig = {\n    height: window.innerHeight - 165,\n    type: \"area\",\n    options: {\n      chart: {\n        id: \"market-sale-chart\",\n        toolbar: {\n          show: true,\n        },\n        zoom: {\n          enabled: true,\n        },\n        sparkline: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 2,\n      },\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shadeIntensity: 1,\n          opacityFrom: 0.5,\n          opacityTo: 0,\n          stops: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n        },\n      },\n      legend: {\n        show: false,\n      },\n      yaxis: {\n        min: 1,\n        max: 100,\n        labels: {\n          show: false,\n        },\n      },\n    },\n    series: [\n      {\n        name: cryptocharts[0] ? cryptocharts[0].name : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  const handleNativeSelect = (value) => {\n    CryptoServices.getWidgetData(dispatch, value);\n  };\n  React.useEffect(() => {\n    CryptoServices.getSymbols(dispatch);\n    CryptoServices.getLineChartData(dispatch);\n    dispatch({ type: CRYPTO_CODES });\n    dispatch({ type: CRYPTO_CODES_GET });\n    dispatch({ type: GLOBAL_CLICKER_STATE });\n    dispatch({ type: CRYPTO_WIDGETDATA });\n  }, [dispatch]);\n  return (\n    <>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Card>\n          <Typography textAlign=\"center\" variant=\"h6\">\n            Choose cryptocurrency\n          </Typography>\n        </Card>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        xl={12}\n        sx={{\n          mt: 1,\n          position: \"sticky\",\n          top: 30,\n          zIndex: 1030,\n          background: \"white\",\n        }}\n      >\n        <FormControl fullWidth>\n          <NativeSelect\n            variant=\"filled\"\n            fullWidth\n            onChange={(e) => handleNativeSelect(e.currentTarget.value)}\n          >\n            <option disabled value={\"btc\"}>\n              Choose cryptocurrency (default: btc)\n            </option>\n            {crypto_symbols[0] &&\n              crypto_symbols[0].map((symbol) => (\n                <option value={symbol}>{symbol}</option>\n              ))}\n          </NativeSelect>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={2} xl={2}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={options} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={10} xl={10}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={crypto} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={optionsbig} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default function CryptoCoin() {\n  return <CoinContent />;\n}\n"],"names":["data","CoinContent","dispatch","useDispatch","cryptocharts","useSelector","state","crypto","widgets","crypto_symbols","symbols","clicks","global","clxarr","forEach","click","i","push","xarr","clientX","yarr","clientY","height","type","options","chart","id","zoom","enabled","plotOptions","bar","distributed","horizontal","dataLabels","stroke","width","xaxis","categories","length","exchange","series","current","toolbar","show","sparkline","curve","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","legend","yaxis","min","max","labels","name","optionsbig","window","innerHeight","React","CryptoServices","CRYPTO_CODES","CRYPTO_CODES_GET","GLOBAL_CLICKER_STATE","CRYPTO_WIDGETDATA","item","xs","sm","md","xl","textAlign","variant","sx","mt","position","top","zIndex","background","fullWidth","onChange","e","value","currentTarget","disabled","map","symbol","CryptoCoin"],"sourceRoot":""}