{"version":3,"file":"static/js/550.f65f3568.chunk.js","mappings":"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","sources":["components/atoms/Dashboard/ApexChart.js","views/crypto/item.js"],"sourcesContent":["import Chart from \"react-apexcharts\";\nimport PropTypes from \"prop-types\";\n\nimport { Card } from \"@mui/material\";\n\nconst ApexChart = ({ data }) => {\n  return (\n    <Card>\n      <Chart {...data} />\n    </Card>\n  );\n};\nApexChart.propTypes = {\n  data: PropTypes.object,\n};\nexport default ApexChart;\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Card, FormControl, NativeSelect, Typography } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApexChart from \"components/atoms/Dashboard/ApexChart\";\nimport {\n  CRYPTO_CODES,\n  CRYPTO_CODES_GET,\n  CRYPTO_WIDGETDATA,\n  GLOBAL_CLICKER_STATE,\n  CRYPTO_ITEM_GET,\n  CRYPTO_ITEM_CLEAR,\n  CRYPTO_HISTORY_GET,\n  CRYPTO_ALL,\n  CRYPTO_BTC_CURRENT_USD,\n} from \"store/actions\";\nimport CryptoServices from \"services/api/crypto\";\nimport { element } from \"prop-types\";\nimport moment from \"moment\";\nimport { Box } from \"@mui/system\";\n\nfunction CoinContentItem() {\n  const dispatch = useDispatch();\n  let limit = 1000000000000;\n  React.useEffect(() => {\n    CryptoServices.getWidgetData(dispatch, item[0] || \"btc\");\n    CryptoServices.getSymbols(dispatch);\n    CryptoServices.getAllHistoryData(dispatch, item[0] || \"btc\", limit);\n    CryptoServices.getAllData(dispatch);\n    dispatch({ type: CRYPTO_ALL });\n    dispatch({ type: CRYPTO_BTC_CURRENT_USD });\n    dispatch({ type: CRYPTO_CODES });\n    dispatch({ type: CRYPTO_CODES_GET });\n    dispatch({ type: GLOBAL_CLICKER_STATE });\n    dispatch({ type: CRYPTO_WIDGETDATA });\n    dispatch({ type: CRYPTO_ITEM_GET });\n  }, [dispatch]);\n\n  const data = useSelector((state) => state.crypto.data);\n  const cryptocharts = useSelector((state) => state.crypto.widgets);\n\n  const item_price = cryptocharts[0] ? cryptocharts[0].price.usd : 0;\n  const item_name = cryptocharts[0] ? cryptocharts[0].name : undefined;\n\n  const item = useSelector((state) => state.crypto.item);\n  const crypto_symbols = useSelector((state) => state.crypto.symbols);\n  const history = useSelector((state) => state.crypto.history);\n\n  let price_history = [];\n  let time_history = [];\n  let time_history_NewDate = [];\n\n  if (history.length > 0) {\n    history.forEach((element) => {\n      element.forEach((el) => {\n        price_history.push(el.market_data.current_price.usd);\n        let d = el.time.replace(/T/g, \" \");\n        let t = el.time.replace(/.000Z/g, \" \");\n        let dt = `${d} ${t}`;\n        time_history.push(Date.parse(el.time));\n      });\n    });\n  }\n  console.log(time_history);\n  console.log(\n    new Date(time_history[0]).getFullYear(),\n    new Date(time_history[0]).getMonth(),\n    new Date(time_history[0]).getDay(),\n    new Date(time_history[0]).getHours(),\n    new Date(time_history[0]).getMinutes()\n  );\n  if (time_history.length > 0) {\n    time_history.forEach((element) => {\n      time_history_NewDate.push(moment(element).format(\"YYYY MMM Do, h:mm:ss\"));\n      // time_history_NewDate.push(new Date(element));\n    });\n  }\n  console.log(time_history_NewDate);\n\n  const crypto = {\n    height: 400,\n    type: \"bar\",\n    options: {\n      chart: {\n        id: \"crypto-chart\",\n        // stacked: true,\n        zoom: {\n          enabled: false,\n        },\n      },\n      plotOptions: {\n        bar: {\n          distributed: true,\n          horizontal: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n\n      stroke: {\n        width: 2,\n      },\n      xaxis: {\n        categories: cryptocharts.length > 0 ? cryptocharts[0].exchange : null,\n      },\n    },\n    series: [\n      {\n        name: cryptocharts.length > 0 ? cryptocharts[0].name : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  var chartData = {\n    series: [\n      {\n        name: item ? item[0] : \"\",\n        data: price_history.length > 0 ? price_history : [0],\n      },\n    ],\n    type: \"area\",\n    height: 400,\n    options: {\n      chart: {\n        id: \"item_chart\",\n        toolbar: {\n          show: true,\n        },\n        zoom: {\n          enabled: true,\n        },\n        sparkline: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        show: true,\n        curve: \"smooth\",\n        lineCap: \"butt\",\n        colors: undefined,\n        width: 2,\n        dashArray: 0,\n      },\n      title: {\n        text: item ? item[0] : \"\",\n        align: \"center\",\n      },\n      grid: {\n        row: {\n          colors: [\"black\", \"transparent\"], // takes an array which will be repeated on columns\n          opacity: 0.04,\n        },\n      },\n      xaxis: {\n        categories: time_history_NewDate,\n      },\n    },\n  };\n\n  var bar = {\n    type: \"bar\",\n    height: 400,\n    options: {\n      plotOptions: {\n        bar: {\n          borderRadius: 4,\n          horizontal: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      xaxis: {\n        categories: [\n          // \"bitcoin\",\n          item_name,\n        ],\n      },\n    },\n    series: [\n      {\n        data: [\n          // btc_price,\n          item_price.toFixed(2),\n        ],\n      },\n    ],\n  };\n\n  const handleNativeSelect = (value) => {\n    dispatch({ type: CRYPTO_ITEM_CLEAR });\n    CryptoServices.getAllHistoryData(dispatch, value);\n    dispatch({ type: CRYPTO_HISTORY_GET });\n    CryptoServices.getWidgetData(dispatch, value);\n  };\n\n  const handleNativeSelectFilter = (limit) => {\n    CryptoServices.getAllHistoryData(dispatch, cryptocharts[0].symbol, limit);\n    dispatch({ type: CRYPTO_HISTORY_GET });\n  };\n\n  return (\n    <>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Card>\n          <Typography textAlign=\"center\" variant=\"h6\">\n            Choose cryptocurrency\n          </Typography>\n        </Card>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        xl={12}\n        sx={{\n          mt: 1,\n          position: \"sticky\",\n          top: 30,\n          zIndex: 1030,\n          background: \"white\",\n        }}\n      >\n        <FormControl fullWidth>\n          <NativeSelect\n            variant=\"filled\"\n            fullWidth\n            value={item.length < 0 ? null : item[0]}\n            onChange={(e) => handleNativeSelect(e.currentTarget.value)}\n          >\n            <option disabled value={\"btc\"}>\n              Choose cryptocurrency (default: btc)\n            </option>\n            {crypto_symbols[0] &&\n              crypto_symbols[0].map((symbol) => (\n                <option value={symbol}>{symbol}</option>\n              ))}\n          </NativeSelect>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={2} xl={2}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              {/* <Typography>{`btc <-> ${cryptocharts[0].symbol}`}</Typography> */}\n              <Typography>{item_name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={bar} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={10} xl={10}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={crypto} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card\n              sx={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Typography>{cryptocharts[0].name} timeline chart</Typography>\n\n              <FormControl>\n                <NativeSelect\n                  variant=\"filled\"\n                  onChange={(e) =>\n                    handleNativeSelectFilter(e.currentTarget.value)\n                  }\n                >\n                  <option disabled value={100000000000000}>\n                    Choose cryptocurrency (default: 1mld entries)\n                  </option>\n                  {[\n                    { name: \"1 hour\", value: 10 },\n                    { name: \"5 hour\", value: 50 },\n                    { name: \"1 day\", value: 240 },\n                    { name: \"1 month\", value: 7200 },\n                    { name: \"1 year\", value: 87600 },\n                  ].map((symbol) => (\n                    <option value={symbol.value}>{symbol.name}</option>\n                  ))}\n                </NativeSelect>\n              </FormControl>\n            </Card>\n          )}\n        </Grid>\n        {/* <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={optionsbig} />\n            </>\n          )}\n        </Grid> */}\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={chartData} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default function CryptoCoinItem() {\n  return <CoinContentItem />;\n}\n"],"names":["data","CoinContentItem","dispatch","useDispatch","React","CryptoServices","item","type","CRYPTO_ALL","CRYPTO_BTC_CURRENT_USD","CRYPTO_CODES","CRYPTO_CODES_GET","GLOBAL_CLICKER_STATE","CRYPTO_WIDGETDATA","CRYPTO_ITEM_GET","useSelector","state","crypto","cryptocharts","widgets","item_price","price","usd","item_name","name","undefined","crypto_symbols","symbols","history","price_history","time_history","time_history_NewDate","length","forEach","element","el","push","market_data","current_price","d","time","replace","t","Date","parse","console","log","getFullYear","getMonth","getDay","getHours","getMinutes","moment","format","height","options","chart","id","zoom","enabled","plotOptions","bar","distributed","horizontal","dataLabels","stroke","width","xaxis","categories","exchange","series","current","chartData","toolbar","show","sparkline","curve","lineCap","colors","dashArray","title","text","align","grid","row","opacity","borderRadius","toFixed","xs","sm","md","xl","textAlign","variant","sx","mt","position","top","zIndex","background","fullWidth","value","onChange","e","currentTarget","CRYPTO_ITEM_CLEAR","CRYPTO_HISTORY_GET","disabled","map","symbol","display","flexDirection","justifyContent","limit","handleNativeSelectFilter","CryptoCoinItem"],"sourceRoot":""}