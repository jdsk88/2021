{"version":3,"file":"static/js/86.9d2a3455.chunk.js","mappings":"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","sources":["components/atoms/Dashboard/ApexChart.js","components/atoms/infoBox/index.js","views/crypto/item.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import Chart from \"react-apexcharts\";\nimport PropTypes from \"prop-types\";\n\nimport { Card } from \"@mui/material\";\n\nconst ApexChart = ({ data }) => {\n  return (\n    <Card>\n      <Chart {...data} />\n    </Card>\n  );\n};\nApexChart.propTypes = {\n  data: PropTypes.object,\n};\nexport default ApexChart;\n","import { Box } from \"@mui/system\";\nimport React from \"react\";\n\nconst InfoBox = () => {\n  return (\n    <>\n      <Box\n        sx={{\n          width: 450,\n          minHeight: 150,\n          background: \"#070d3e\",\n          color: \"#67ff43\",\n          border: \"2px solid #67ff43\",\n        }}\n      ></Box>\n    </>\n  );\n};\nexport default InfoBox;\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Card, FormControl, NativeSelect, Typography } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ApexChart from \"components/atoms/Dashboard/ApexChart\";\nimport {\n  CRYPTO_CODES,\n  CRYPTO_CODES_GET,\n  CRYPTO_WIDGETDATA,\n  GLOBAL_CLICKER_STATE,\n  CRYPTO_ITEM_GET,\n  CRYPTO_ITEM_CLEAR,\n  CRYPTO_HISTORY_GET,\n  CRYPTO_ALL,\n  CRYPTO_BTC_CURRENT_USD,\n  COINGECKOAPI_CHART_GET,\n} from \"store/actions\";\nimport CryptoServices from \"services/api/crypto\";\nimport { element } from \"prop-types\";\nimport moment from \"moment\";\nimport { Box } from \"@mui/system\";\nimport InfoBox from \"components/atoms/infoBox\";\n\nfunction CoinContentItem() {\n  const dispatch = useDispatch();\n  let limit = 1000000000000;\n  React.useEffect(() => {\n    CryptoServices.getWidgetData(dispatch, item[0] || \"btc\");\n    CryptoServices.getSymbols(dispatch);\n    CryptoServices.getAllHistoryData(dispatch, item[0] || \"btc\", limit);\n    CryptoServices.getAllData(dispatch);\n    CryptoServices.getChart(dispatch, \"bitcoin\");\n    dispatch({ type: COINGECKOAPI_CHART_GET });\n    dispatch({ type: CRYPTO_ALL });\n    dispatch({ type: CRYPTO_BTC_CURRENT_USD });\n    dispatch({ type: CRYPTO_CODES });\n    dispatch({ type: CRYPTO_CODES_GET });\n    dispatch({ type: GLOBAL_CLICKER_STATE });\n    dispatch({ type: CRYPTO_WIDGETDATA });\n    dispatch({ type: CRYPTO_ITEM_GET });\n  }, [dispatch]);\n  const chart = useSelector((state) => state.crypto.chart);\n  const data = useSelector((state) => state.crypto.data);\n  console.log(chart[0]);\n  const cryptocharts = useSelector((state) => state.crypto.widgets);\n\n  const item_price = cryptocharts[0] ? cryptocharts[0].price.usd : 0;\n  const item_name = cryptocharts[0] ? cryptocharts[0].name : undefined;\n\n  const item = useSelector((state) => state.crypto.item);\n  const crypto_symbols = useSelector((state) => state.crypto.symbols);\n  const history = useSelector((state) => state.crypto.history);\n\n  let price_history = [];\n  let time_history = [];\n  let time_history_NewDate = [];\n\n  if (history.length > 0) {\n    history.forEach((element) => {\n      element.forEach((el) => {\n        price_history.push(el.market_data.current_price.usd);\n        let d = el.time.replace(/T/g, \" \");\n        let t = el.time.replace(/.000Z/g, \" \");\n        let dt = `${d} ${t}`;\n        time_history.push(Date.parse(el.time));\n      });\n    });\n  }\n  // console.log(time_history);\n  // console.log(\n  //   new Date(time_history[0]).getFullYear(),\n  //   new Date(time_history[0]).getMonth(),\n  //   new Date(time_history[0]).getDay(),\n  //   new Date(time_history[0]).getHours(),\n  //   new Date(time_history[0]).getMinutes()\n  // );\n  if (time_history.length > 0) {\n    time_history.forEach((element) => {\n      time_history_NewDate.push(moment(element).format(\"YYYY MMM Do, h:mm:ss\"));\n      // time_history_NewDate.push(new Date(element));\n    });\n  }\n  // console.log(time_history_NewDate);\n\n  const crypto = {\n    height: 400,\n    type: \"bar\",\n    options: {\n      chart: {\n        id: \"crypto-chart\",\n        // stacked: true,\n        zoom: {\n          enabled: false,\n        },\n      },\n      plotOptions: {\n        bar: {\n          distributed: true,\n          horizontal: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n\n      stroke: {\n        width: 2,\n      },\n      xaxis: {\n        categories: cryptocharts.length > 0 ? cryptocharts[0].exchange : null,\n      },\n    },\n    series: [\n      {\n        name: cryptocharts.length > 0 ? cryptocharts[0].name : null,\n        data: cryptocharts.length > 0 ? cryptocharts[0].current : null,\n      },\n    ],\n  };\n\n  var chartData = {\n    series: [\n      {\n        // name: item ? item[0] : \"\",\n        data: chart[0] && chart[0].prices,\n      },\n    ],\n    type: \"area\",\n    height: 400,\n    options: {\n      chart: {\n        id: \"item_chart\",\n        toolbar: {\n          show: true,\n        },\n        zoom: {\n          enabled: true,\n        },\n        sparkline: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        show: true,\n        curve: \"smooth\",\n        lineCap: \"butt\",\n        colors: undefined,\n        width: 2,\n        dashArray: 0,\n      },\n      title: {\n        text: item ? item[0] : \"\",\n        align: \"center\",\n      },\n      grid: {\n        row: {\n          colors: [\"black\", \"transparent\"], // takes an array which will be repeated on columns\n          opacity: 0.04,\n        },\n      },\n      xaxis: {\n        categories: chart[0] && chart[0].timeline,\n      },\n    },\n  };\n\n  var bar = {\n    type: \"bar\",\n    height: 400,\n    options: {\n      plotOptions: {\n        bar: {\n          borderRadius: 4,\n          horizontal: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      xaxis: {\n        categories: [\n          // \"bitcoin\",\n          item_name,\n        ],\n      },\n    },\n    series: [\n      {\n        name: item_name,\n        data: [item_price.toFixed(2)],\n      },\n    ],\n  };\n\n  const handleNativeSelect = (value) => {\n    dispatch({ type: CRYPTO_ITEM_CLEAR });\n    CryptoServices.getAllHistoryData(dispatch, value);\n    dispatch({ type: CRYPTO_HISTORY_GET });\n    CryptoServices.getWidgetData(dispatch, value);\n  };\n  const [loader, setLoading] = React.useState(false);\n  const handleNativeSelectFilter = (limit) => {\n    CryptoServices.getAllHistoryData(dispatch, cryptocharts[0].symbol, limit)\n      .then(() => setLoading(true))\n      .finally(() => {\n        setLoading(false);\n      });\n    dispatch({ type: CRYPTO_HISTORY_GET });\n  };\n\n  return (\n    <>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Card>\n          <Typography textAlign=\"center\" variant=\"h6\">\n            Choose cryptocurrency\n          </Typography>\n        </Card>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={12}\n        md={12}\n        xl={12}\n        sx={{\n          mt: 1,\n          position: \"sticky\",\n          top: 30,\n          zIndex: 1030,\n        }}\n      >\n        <FormControl fullWidth>\n          <NativeSelect\n            sx={{ background: \"white\" }}\n            value={item.length < 0 ? null : item[0]}\n            onChange={(e) => handleNativeSelect(e.currentTarget.value)}\n          >\n            <option disabled value={\"btc\"}>\n              Choose cryptocurrency (default: btc)\n            </option>\n            {crypto_symbols[0] &&\n              crypto_symbols[0].map((symbol) => (\n                <option value={symbol}>{symbol}</option>\n              ))}\n          </NativeSelect>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={2} xl={2}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              {/* <Typography>{`btc <-> ${cryptocharts[0].symbol}`}</Typography> */}\n              <Typography>{item_name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={bar} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12} sm={12} md={10} xl={10}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card>\n              <Typography>{cryptocharts[0].name}</Typography>\n            </Card>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={crypto} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={12} md={12} xl={12}>\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <Card\n              sx={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Typography>{cryptocharts[0].name} timeline chart</Typography>\n\n              <FormControl>\n                <NativeSelect\n                  variant=\"filled\"\n                  onChange={(e) =>\n                    handleNativeSelectFilter(e.currentTarget.value)\n                  }\n                >\n                  {[\n                    { name: \"1 hour\", value: 10 },\n                    { name: \"5 hour\", value: 50 },\n                    { name: \"1 day\", value: 240 },\n                    { name: \"1 month\", value: 7200 },\n                    { name: \"1 year\", value: 87600 },\n                  ].map((symbol) => (\n                    <option value={symbol.value}>{symbol.name}</option>\n                  ))}\n                </NativeSelect>\n              </FormControl>\n            </Card>\n          )}\n        </Grid>\n        {/* <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              <ApexChart data={optionsbig} />\n            </>\n          )}\n        </Grid> */}\n        <Grid item xs={12} sm={12} md={12} xl={12}>\n          {cryptocharts.length < 1 ? (\n            <></>\n          ) : (\n            <>\n              {loader == true ? (\n                <h1>LOADER</h1>\n              ) : (\n                <ApexChart data={chartData} />\n              )}\n            </>\n          )}\n          <Grid item xs={12} sm={12} md={12} xl={12}>\n            <InfoBox />\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default function CryptoCoinItem() {\n  return <CoinContentItem />;\n}\n","import createBox from '../createBox';\nconst Box = createBox();\nexport default Box;"],"names":["data","Box","sx","width","minHeight","background","color","border","CoinContentItem","dispatch","useDispatch","React","CryptoServices","item","type","COINGECKOAPI_CHART_GET","CRYPTO_ALL","CRYPTO_BTC_CURRENT_USD","CRYPTO_CODES","CRYPTO_CODES_GET","GLOBAL_CLICKER_STATE","CRYPTO_WIDGETDATA","CRYPTO_ITEM_GET","chart","useSelector","state","crypto","console","log","cryptocharts","widgets","item_price","price","usd","item_name","name","undefined","crypto_symbols","symbols","history","price_history","time_history","time_history_NewDate","length","forEach","element","el","push","market_data","current_price","d","time","replace","t","Date","parse","moment","format","height","options","id","zoom","enabled","plotOptions","bar","distributed","horizontal","dataLabels","stroke","xaxis","categories","exchange","series","current","chartData","prices","toolbar","show","sparkline","curve","lineCap","colors","dashArray","title","text","align","grid","row","opacity","timeline","borderRadius","toFixed","loader","setLoading","Grid","xs","sm","md","xl","Card","Typography","textAlign","variant","mt","position","top","zIndex","FormControl","fullWidth","NativeSelect","value","onChange","e","currentTarget","CRYPTO_ITEM_CLEAR","CRYPTO_HISTORY_GET","disabled","map","symbol","ApexChart","display","flexDirection","justifyContent","limit","then","finally","handleNativeSelectFilter","CryptoCoinItem","createBox"],"sourceRoot":""}